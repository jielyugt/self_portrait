/**
 * Shapes module for face component libraries
 * Contains predefined shape libraries and import/export functionality
 * Note: Currently not actively used by the main app but available for development tools
 */
(function (root) {
  const FaceApp = (root.FaceApp = root.FaceApp || {});

  /**
   * Library of predefined face component shapes
   * All coordinates are in normalized [0,1] space
   */
  const LIB = {
    // Head outline variations
    head: {
      // Front-facing head outline
      head_front: [
        { x: .15, y: .20 }, { x: .10, y: .35 }, { x: .10, y: .65 }, { x: .20, y: .85 }, { x: .50, y: .95 },
        { x: .80, y: .85 }, { x: .90, y: .65 }, { x: .90, y: .35 }, { x: .85, y: .20 }, { x: .50, y: .10 }, { x: .15, y: .20 }
      ],
      // Left-profile head outline
      head_left: [
        { x: .25, y: .18 }, { x: .18, y: .35 }, { x: .18, y: .70 }, { x: .30, y: .88 }, { x: .58, y: .95 },
        { x: .88, y: .83 }, { x: .80, y: .65 }, { x: .68, y: .60 }, { x: .70, y: .52 }, { x: .68, y: .45 },
        { x: .65, y: .35 }, { x: .55, y: .25 }, { x: .25, y: .18 }
      ],
      // Right-profile head outline (generated by mirroring left)
      head_right: []
    },

    // Eye shape variations
    eyes: {
      // Open eyes
      eyes_open: [
        { x: .35, y: .45 }, { x: .43, y: .44 }, { x: .51, y: .45 }, { x: .43, y: .46 }, { x: .35, y: .45 }
      ],
      // Closed eyes  
      eyes_closed: [
        { x: .33, y: .47 }, { x: .43, y: .49 }, { x: .53, y: .47 }
      ],
      // Dreamy/half-closed eyes
      eyes_dreamy: [
        { x: .33, y: .46 }, { x: .38, y: .44 }, { x: .43, y: .43 }, { x: .48, y: .44 }, { x: .53, y: .46 },
        { x: .48, y: .485 }, { x: .43, y: .495 }, { x: .38, y: .485 }, { x: .33, y: .46 }
      ]
    },

    // Mouth shape variations
    mouth: {
      // Neutral mouth expression
      mouth_neutral: [
        { x: .35, y: .70 }, { x: .50, y: .72 }, { x: .65, y: .70 }
      ],
      // Smiling mouth
      mouth_smile: [
        { x: .33, y: .70 }, { x: .40, y: .75 }, { x: .50, y: .78 }, { x: .60, y: .75 }, { x: .67, y: .70 }
      ],
      // Open mouth
      mouth_open: [
        { x: .38, y: .70 }, { x: .50, y: .74 }, { x: .62, y: .70 }, { x: .50, y: .76 }, { x: .38, y: .70 }
      ]
    }
  };

  /**
   * Generate right-profile head by mirroring left-profile
   * This ensures symmetry between left and right profiles
   */
  LIB.head.head_right = LIB.head.head_left.map(p => ({
    x: 1 - p.x,  // Mirror X coordinate 
    y: p.y       // Keep Y coordinate same
  }));

  /**
   * Exports the current shape library as a JSON file
   * Useful for backing up custom shape configurations
   */
  function exportJSON() {
    const data = {
      head: LIB.head,
      eyes: LIB.eyes,
      mouth: LIB.mouth
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json'
    });

    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'face_shapes.json';
    a.click();
    URL.revokeObjectURL(a.href);
  }

  /**
   * Imports shape library from a JSON file
   * @param {File} file - JSON file containing shape data
   * @param {Function} onDone - Success callback
   * @param {Function} onError - Error callback  
   */
  function importJSONFile(file, onDone, onError) {
    const reader = new FileReader();

    reader.onload = e => {
      try {
        const data = JSON.parse(e.target.result);

        // Validate required structure
        if (!data.head || !data.eyes || !data.mouth) {
          throw new Error('Missing required shape categories (head, eyes, mouth)');
        }

        // Update library with imported data
        const { head, eyes, mouth } = data;

        // Auto-generate right head profile if missing
        if (!head.head_right && head.head_left) {
          head.head_right = head.head_left.map(p => ({
            x: 1 - p.x,
            y: p.y
          }));
        }

        // Update global library
        LIB.head = head;
        LIB.eyes = eyes;
        LIB.mouth = mouth;

        // Notify success
        if (onDone) onDone();

      } catch (err) {
        console.error('Error importing shapes:', err);
        if (onError) onError(err);
      }
    };

    reader.readAsText(file);
  }

  // Export public interface
  FaceApp.Shapes = {
    LIB,
    exportJSON,
    importJSONFile
  };
})(window);
